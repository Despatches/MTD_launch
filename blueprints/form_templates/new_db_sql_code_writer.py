from launch.blueprints.form_templates.json_form_templates import template_sortdef create_new_sql_table(template, table_area, data_res = 'no'):	form_ident = template['form_identifier'] 	new_table_name = f'{form_ident}_data'	data_rows = []	sub_tables = []	sub_tables_list = []	form_id_foreign_key =f'	parent_form INT, \n\					FOREIGN KEY (parent_form) REFERENCES `{table_area}`.`{new_table_name}`(form_id),\n'	details_enum = []	docu_enum = []	table_data_collect = ''	table_data_finder = {}	table_data_find_count = 0	data_result_apply = {}	current_loop = 'stand'	pairings = {}	#current_sub_table = {}	class sub_Table:		def __init__(self, name):			self.table_place_count = 0			self.data_collect = ''			self.table_data_finder = {}			self.data_result_apply = {}			self.name = name			return None		def add_data_column(self, question):			i = question['identifier']			self.data_collect += f'{i},'			self.table_data_finder[question['identifier']] = {'db_position':self.table_place_count, 'input_type':question['input_type']}			self.table_place_count += 1			self.data_result_apply[question['identifier']]={}# collect object lists of db column references for main table	def add_to_table_data_finder(question):		if current_loop == 'stand':			nonlocal table_data_collect			nonlocal table_data_finder			nonlocal table_data_find_count			nonlocal data_result_apply			i = question['identifier']			table_data_collect += f'{i},'			table_data_finder[question['identifier']] = {'db_position':table_data_find_count, 'input_type':question['input_type']}			table_data_find_count += 1			data_result_apply[question['identifier']]={}# turn pyhton list into JSON list	def list_create(process_list):		opt_count = 0		string_list = ''		for opt in process_list:			if opt_count > 0:				string_list += ','			string_list += f'"{opt}"'			opt_count += 1		return string_list		def format_create_table(sql_statement,d_rows ):		db_columns = len(d_rows)		count = 1		for d in d_rows:			if count == db_columns:				sql_statement +='	' + d + '\n);'			else:				sql_statement += '	' + d + ',' + '\n'			count += 1		return sql_statement	def input_type_eval(question):		result_options = []		column_data = None		if question['input_type'] == 'bool':			column_data = 'ENUM ("empty","yes","no") NOT NULL'			result_options = ['empty', 'yes', 'no']		elif question['input_type'] == 'bool_extra':			column_data = 'enum ("empty","yes","no"'			result_options = ['empty', 'yes', 'no']			if 'radio_options' in question and len(question['radio_options']) > 0:				for opt in question['radio_options']:					result_options.append(opt['radio_value'])					radio_value = opt['radio_value']					column_data += f',"{radio_value}"'				column_data += ') NOT NULL'		elif question['input_type'] == 'radio':			result_options = []			if 'radio_options' in question and len(question['radio_options']) > 0:				column_data = 'ENUM ("empty",'				opt_count = 0				result_options = ['empty']				for opt in question['radio_options']:					if opt_count > 0:						column_data += ','					radio_value = opt['radio_value']					column_data += f'"{radio_value}"'					opt_count += 1					result_options.append(opt['radio_value'])				column_data += ') NOT NULL'		elif question['input_type'] == 'text':			column_data =  'VARCHAR (120)'			result_options = ['none', 'value']		elif question['input_type'] == 'detail_text':			details_enum.append(question['identifier'])			column_data = 'BOOL DEFAULT FALSE'			result_options = ['true', 'false']		elif question['input_type'] == 'docu':			docu_enum.append(question['identifier'])			column_data = 'BOOL DEFAULT FALSE'			result_options = ['true', 'false']		elif question['input_type'] == 'checkbox':			column_data = 'ENUM ("empty","yes","no") NOT NULL'			result_options = ['empty', 'yes', 'no']		elif question['input_type'] == 'date':			column_data = 'DATE'			result_options = ['none', 'value']		elif question['input_type'] == 'currency':			column_data = 'DOUBLE PRECISION (11,2)'			result_options = ['none', 'value']		elif question['input_type'] == 'postcode':			column_data = 'CHAR (8)'			result_options = ['none', 'value']		elif question['input_type'] == 'number':			column_data = 'INT'			result_options = ['none', 'value']		else:			column_data =  'VARCHAR (120)'			result_options = ['none', 'value']		return {'sql_data_type':column_data, 'result_options':result_options}			def question_loop(loop_item, lines, **kwargs):		def sub_table_loop(loop_question):			sub_table_ident = loop_question['identifier']			sub_table_name = f'{form_ident}_{sub_table_ident}'			identifier = f'{sub_table_ident}_count'			table_route = f'`{table_area}`.`{sub_table_name}`'			loop_question_augment = loop_question			loop_question_augment['identifier'] = identifier			lines.append(f'{identifier} INT DEFAULT 0')			add_to_table_data_finder(loop_question_augment)			sub_data_rows = []			nonlocal current_loop			current_loop = 'loop'			current_sub_table = sub_Table(sub_table_name)			returns = question_loop(loop_question['sub_questions'], sub_data_rows, current_sub_table=current_sub_table)			sub_db_data_pairing = {'database':identifier, 'form':sub_table_ident, 'table':table_route, 'rows':returns['section_db_data_pairings']}			current_sub_table = returns['current_sub_table']			current_loop = 'stand'			sub_data_rows = returns['data_rows']			sub_tables_statement = format_create_table((f'CREATE TABLE {table_route}(\n 	ref INT PRIMARY KEY AUTO_INCREMENT, \n sub_attributes BOOL DEFAULT FALSE, \n' + form_id_foreign_key), sub_data_rows)			sub_key = {'table_route':table_route, 'table_key':current_sub_table.table_data_finder, 'table_collector':current_sub_table.data_collect}			return (sub_tables_statement, sub_db_data_pairing, sub_key)			section_db_data_pairings = []		for question in loop_item:			if 'question_set' not in question:				if 'input_type' in question:					if question['input_type'] != 'multi_row':						row = question['identifier']						""" key to insert data from form into database """						section_db_data_pairings.append({'database':row, 'form':row})						add_to_table_data_finder(question)						input_evals = input_type_eval(question)						sql_data_type = input_evals['sql_data_type']						result_options = input_evals['result_options']						""" creation of layouts for ancilliary data """						if current_loop == 'stand' and len(result_options) > 0:							if data_res == 'no':								for r in result_options:									data_result_apply[row][r] = []									"""data_result_apply[row][r] = {'implications' : {}}									actor_types = ['Buyer', 'Vendor', 'Loan_security', 'Legal_IN', 'PII', 'Insurance', 'Valuation', 'Survey']									for actor in actor_types:										data_result_apply[row][r]['implications'][actor] = {																								'detail_fail':0,																								'work_requ': 0,																								'cost_var':0,																								'time_var':0,																								'complex_var':0,																								'viability':0,																								'value_var':0																							}"""									#{'implications' : ''}									"""[{'negative_implication':''},{'value_impact':''},{'lending_security':''},{'title_integrity':''}]"""									"""[{'proffessional_indem_ind:'', latent_defect:'', 'potential'_conformity_issue':''}] """						else:							if 'current_sub_table' in kwargs:								kwargs['current_sub_table'].add_data_column(question)						if sql_data_type != None:							row += ' ' + sql_data_type							lines.append(row)						if 'sub_questions' in question and len(question['sub_questions']) > 0  and question['input_type'] != 'multi_row':							if 'current_sub_table' in kwargs:								section_items = question_loop(question['sub_questions'], lines, current_sub_table = kwargs['current_sub_table'] )							else:								section_items = question_loop(question['sub_questions'], lines)							lines = section_items['data_rows']							for x in section_items['section_db_data_pairings']:								section_db_data_pairings.append(x)								else:						if question['input_type'] == 'multi_row' and question['sub_questions'] != None and len(question['sub_questions']) > 0:							returns = sub_table_loop(question)							sub_tables.append(returns[0])							section_db_data_pairings.append(returns[1])							sub_tables_list.append(returns[2])							if current_loop == 'stand':								if data_res == 'no':									row = question['identifier']									data_result_apply[row]['value'] = []			elif 'question_set' in question and question['question_set'] == 'true':				if 'current_sub_table' in kwargs:					section_items = question_loop(question['sub_questions'], lines, current_sub_table = kwargs['current_sub_table'] )				else:					section_items = question_loop(question['sub_questions'], lines)				for x in section_items['section_db_data_pairings']:					section_db_data_pairings.append(x)								lines = section_items['data_rows']						if current_loop == 'stand':			return {'data_rows':lines, 'sub_tables':sub_tables, 'section_db_data_pairings':section_db_data_pairings}		else: return {'data_rows':lines, 'sub_tables':sub_tables, 'section_db_data_pairings':section_db_data_pairings, 'current_sub_table':kwargs['current_sub_table']}	for section in template['Sections']:		section_items = question_loop(section['main_questions'], data_rows)		data_rows = section_items['data_rows']		pairings[section['section_identifier']] = section_items['section_db_data_pairings']#		for d in data:#			data_rows.append(d)	sql_statement = f'create table `{table_area}`.`{new_table_name}`(\n'	sql_statement += '	form_id INT PRIMARY KEY AUTO_INCREMENT,	\n'	sql_statement += '	section_marker INT DEFAULT 0,\n'	sql_statement += '	ceation_moment DATETIME, \n'	sql_statement += '	user_initiator INT,  \n'	#sql_statement += "	title_component_type ENUM('freehold', 'freehold_share', 'leasehold', 'commonhold'),  \n"	#sql_statement += "	particulars_type ENUM('sale', 'market'), \n"	sql_statement = format_create_table(sql_statement, data_rows)	detail_table = """	CREATE TABLE {}.`{form_ident}_detail_text`(		parent_form INT,			FOREIGN KEY (parent_form) references `form_data`.`{form_ident}_data`(form_id),	 	text_content VARCHAR(2000),		ref INT PRIMARY KEY AUTO_INCREMENT,		text_reference ENUM({detail_list_string}),		viewed BOOL DEFAULT FALSE	);""".format('`'+table_area+'`',form_ident = form_ident,detail_list_string = list_create(details_enum))	docu_table ="""	CREATE TABLE {}.`{form_ident}_docu_storage`(			parent_form INT,			FOREIGN KEY (parent_form) references `form_data`.`{form_ident}_data`(form_id),			document MEDIUMBLOB,			ref INT PRIMARY KEY AUTO_INCREMENT,			text_reference ENUM ({document_list_string}),			document_name VARCHAR(25),			document_description VARCHAR(150),			viewed BOOL DEFAULT FALSE,			upload DATETIME		);	""".format('`'+table_area+'`',form_ident = form_ident,document_list_string = list_create(docu_enum))	work_task_table = "CREATE TABLE  /`{}`./`{}_work_tasks`(\n 	\						{} \						task_creation_date DATETIME,\						task_completion_target DATETIME,\						task_title varchar(150),\						task_body varchar(2000)\						attatched_identifier varchar(100),\						identifier_value varchar(1000)"	"""main db table"""	print(sql_statement)	for sub in sub_tables:		print(sub)	""" detail table containing enum of all detail text types"""	print(detail_table)	"""table containing enum of all document storing identifiers"""	print(docu_table)	""" question identifier list"""	print(table_data_collect)	"""database collevtion sequence for sql query aka (identifier : database collection position) """	for key in table_data_finder:		print (f"'{key}'" ,':' ,table_data_finder[key] , ',', '\n')	print(pairings)	print(sub_tables_list)# Write out db data and applyed characteristics	def print_result_object(data_result_apply):		for key in data_result_apply:			print (f"'{key}'",':','{')			for key_2 in data_result_apply[key]:				print('\n','	',f"'{key_2}'", ':', '[')				for process in data_result_apply[key][key_2]:					print('\n', '		', f"'{process}'" , ':', '{')					for process_2 in data_result_apply[key][key_2][process]:						print('\n', '			', f"'{process_2}'" , ':', '{')						for process_3 in data_result_apply[key][key_2][process][process_2]:							print('\n', '				', f"'{process_3}'" , ':', data_result_apply[key][key_2][process][process_2][process_3],',')						print('\n','			', '},')					print('\n','		', '},')				print('\n','	', '],')			print('\n','}', ',')	print_result_object(data_result_apply)	if data_res == 'yes':		return data_result_apply	return sql_statementdef element_relevancy(template):	# template_sort() found in json_form_templates.py	sorted_template  = template_sort(template)	template = sorted_template['template']	flows = sorted_template['flow_controls']	section_questions  = sorted_template['questions']	questions_raw = {}	flow_controls = {}	for flow in flows:		def flow_expansion(iter_object):			for q in iter_object:				if flow['control_subject'] == q['identifier']:					if 'question_set' in q:						for q_2 in q['sub_questions']:							if q_2['identifier'] not in flow_controls:								flow_controls[q_2['identifier']] = []							for flowy in flow['reliances']:								flow_controls[q_2['identifier']].append(flowy)							if 'sub_questions' in q_2 and len(q_2['sub_questions'])> 0:								flow_expansion(q_2['sub_questions'])							"""if 'sub_questions' in q_2 and len(q_2['sub_questions']) > 0:								flow_expansion(q_2['sub_questions'])"""					else:						if flow['control_subject'] not in flow_controls:							flow_controls[flow['control_subject']] = []						for flowy in flow['reliances']:							flow_controls[flow['control_subject']].append(flowy)						if 'sub_questions' in q and len(q['sub_questions']) > 0:							flow_expansion(q['sub_questions'])				elif 'sub_questions' in q and len(q['sub_questions'])> 0:					flow_expansion(q['sub_questions'])		for section in template['Sections']:			flow_expansion(section['main_questions'])			#for q in section['main_questions']:		#flow_controls[flow['control_subject']] = flow['reliances']	def find_types():		item_list = {'detail':[],'docu':[]}		def type_q_eval(q_search, item_list):			for q in q_search:				if 'question_set' not in q and q['input_type'] != 'multi_row':					if q['input_type'] == 'docu':						item_list['docu'].append(q)					elif q['input_type'] == 'detail_text':						item_list['detail'].append(q)				if 'sub_questions' in q and len(q['sub_questions']) > 0:					if 'input_type' in q and q['input_type'] == 'multi_row':						continue					item_list = type_q_eval(q['sub_questions'], item_list)			return item_list				for section in template['Sections']:			type_q_eval(section['main_questions'], item_list)		return item_list	typings = find_types()	document_list = typings['docu']	detail_list = typings['detail']			 	#print(document_list)	#for q in section_questions:		#print (q)		#for ini in q:			#print (ini)			#ident = ini['identifier']			#questions_raw[ident] = ini	for q in questions_raw:		if q['input_type'] == 'docu':			document_list.append(q)	return {'document_list':document_list, 'flow_controls':flow_controls, 'detail_list':detail_list, 'sections':sorted_template['sections'], 'questions':section_questions, 'template':template}