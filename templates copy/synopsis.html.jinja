{% extends "action_base.html" %}

{% block action %}
<meta id="unique_selection_ID">
<meta id="pydata" data-numselecsets="{{number_of_selec_sets}}">
<style>

.fraud{
	color: red;
}

.competancy{
	color: orange;
}

.stand_text{
	color: black;
}

.text_hover{
	color: white;
}
</style>

review versions
<div>
	<button id="prev_selec_set"> prev version </button>
	<button id="earlier_selec_set" disabled> next version</button>
	<button style="align=right;" id="toggle_side_view">Open side view</button>
	<div>
		<form>
			<input id="search_text" type="text" name="search_meanings" placeholder="look for specific data">
			<button type="button" id="search_specific_content">search</button>
		</form>
	</div>
	<div>
		<p id="matches" class="hide"><b><span id="find_counter"></span></b><span> results found</span></p>
		<p id="statement_matches" class="hide"><b><span id="statement_match_counter"></span></b><span> statement matches</span></p>
	</div>
	<div align="center">
		Filters
	<form id="filter">
		<input id="bytopic" type="radio" name="Topic" value="topic" checked/> Filter By Topic
		<input type="radio" name="Topic" value="risk"/> Filter By Risk
		<input type="checkbox" name="Topic" value="fraud"/> Filter By Fraud
		<input type="checkbox" name="Topic" value="competancy"/> Filter By competancy	
	</form>
		<br>
	</div>
		<div id='fil' align="center">
		<input id='topic' type='checkbox' name='Title Fundamentals' checked>
			Sewage 
		<input id='topic' type='checkbox' name='Sewage'checked>
			Freehold
		<input id='topic' type='checkbox' name='Freehold'checked>
			Leasehold
		<input id='topic' type='checkbox' name='Leasehold'checked>
			Tenure
		<input id='topic' type='checkbox' name='Tenure'checked>
			Building Use
		<input id='topic' type='checkbox' name='Building Use'checked>
			Costs and Charges
		<input id='topic' type='checkbox' name='Costs and Charges'checked>
			Building type
		<input id='topic' type='checkbox' name='Building type'checked>
			Location
		<input id='topic' type='checkbox' name='Location'checked>
	</div>
</div>
<div class="columns" id="meaning_and_side">
	<div class="column">
		<div id="meaning_body" align="left">
			<button id="loading"class="button is-primary is-loading hide">Loading</button>
			<p id="meaning_string">

			</p>
		</div>
	</div>		
</div>
<div id="divId" class="hide box">
	<p id="selec_competancy"></p>
	<p id="selec_fraud"></p>
	<div id="statement_alters">
		<button class = "button is-small" id="change_selec"> Change Selection</button>
		<button class = "button is-small" id="alter_selec_text"> Alter Statement</button>
	</div>
		<div id="alter_statement_options">
			<button class = "button is-small" id="add_statement"> add statement</button>
			<button class = "button is-small" id="alter_statement_text">alter statement</button>
		</div>
		<div>
			<button class = "button is-small is-success" id="open_work_task_module">
				Add Work Task
			</button>
			<button class = "button is-small is-success" id="open_note_module">
				Add note
			</button>			
			<div id="work_task_module">
				<div style="display:flex; flex-direction:row;">
					<div style="display:flex; flex-direction:column;">
						<div>Task Description</div>
						<input type="text" id="work_task_header">
					</div>
					<div style="display:flex; flex-direction:column;">
						<button id="add_work_task_schedule">
							Add Schedule Date
						</button>
						<input type="date" class="date" id="work_task_date">
					</div>
				</div>
				<div style="display:flex; flex-direction:column;">
					<div> Task Data</div>
					<textarea id="work_task_info"></textarea>
				</div>
				<div>
					<button class="button is-small is-success" id="create_work_task">
						Create Work Task
					</button>
				</div>			
			</div>
			<div id="stand_note_module" class="hide">
				<div style="display:flex; flex-direction:column;">
					<input type="text">
				</div>
			</div>
		</div>
	</div>
</div>
<script>


$(document).ready(function(){
	let divmin = false;
	let getinfo = false;
	var selec_meaning = "empty"
	var selec_ans
	var infoid
	var selec_set_counter= 0
	var selection_sets = JSON.parse({{ selection_sets | tojson}})
	var cur_set = []
	var side_view = false;
	number_of_selec_sets = $("meta[id=pydata").data( "numselecsets" )
	var sets ={}
	var matching_selection = []
	var work_task_view = false

	/*prevents User seeing element movements*/
	function close_work_task_module(){
		$("#open_note_module, #statement_alters").slideDown();				
		$("#work_task_module").slideUp();
		work_task_view = false;
		$("#open_work_task_module").text("Add Work Task");
	}

	function side_and_modules(){
		$("#alter_statement_options").slideUp()
		$("#work_task_module").slideUp()

		$("#open_work_task_module").click(function(){
			if (work_task_view == false){
				$("#open_note_module, #statement_alters").slideUp();
				$("#work_task_module").slideDown();
				work_task_view = true
				$("#open_work_task_module").text("Cancel Work Task");
			}else if (work_task_view == true){
				close_work_task_module()				
			};
		});
		$("#selec_competancy").mouseenter(function(){
			alert("5")
		});
	};

	side_and_modules()

	/*Select Meanings using the stored left right values of the current selec_ans variable meaning*/
	function meaning_lft_rgt(func){
		$("span[type=meaning]").each(function(){
			if ($(this).data("lft") > selec_ans.lft && $(this).data("rgt") < selec_ans.rgt){
				func($(this))
			}
		});
	}

	/*function add_note_or_work_task(data,type){
		$.ajax({
			url : "/add_work_task_or_note"
			data :{info : data, type : type}
			type : "POST"
			success : function(data){

			}
		})
	}*/

	$("#create_work_task").click(function(){
		var work_task_data = {}
		work_task_data.work_task_header = $("#work_task_header").val()
		work_task_data.work_task_date = $("#work_task_date").val()
		work_task_data.work_task_info = $("#work_task_info").val()
		work_task_data.unique_selection = $(selec_meaning).attr("id")
		work_task_data.unique_selection = $(selec_meaning).data("parent_set")
		add_note_or_work_task(work_task_data)
	})


	function search_function(){
		document.querySelector('#search_text').addEventListener('keyup', function(e) {
				var match_count = 0
				matching_selection = {}
				search_term = $("input[id=search_text]").val()
				find_counter = 0
				if (search_term !== ""){
					search_length  = search_term.length
					for (let m of cur_set){
						$(`span[id='${m.unique_selection_ID}']`).empty();
						found_content_end= 0
						finds = [];
						text_length=m.answer_meaning.length
						remaining_search_length=text_length
						valid = m.answer_meaning.search(new RegExp(search_term, "i"));
						if (valid != -1){
							match_count += 1
							matching_selection.match_count = m
							found_content_end=valid+(search_length)
							finds.push([valid,found_content_end])
							remaining_search_length=remaining_search_length-found_content_end
							while(valid != -1 && remaining_search_length >= search_length){
								search_next = m.answer_meaning.substring(found_content_end)
								valid = search_next.search(new RegExp(search_term, "i"));
								if (valid != -1){
									finds.push([found_content_end+valid,found_content_end+valid+(search_length)])
									found_content_end=found_content_end+valid+(search_length)
									remaining_search_length=found_content_end
								};
							};
							$(`span[id=${m.unique_selection_ID}]`).text('');
							$(`span[id=${m.unique_selection_ID}]`).attr('search','found');
							text_position = 0
							for (let f of finds){
								find_counter += 1
								if (f[0] == text_position){
									new_span = m.answer_meaning.substring(f[0],f[1]);
									$(`span[id=${m.unique_selection_ID}]`).append(`<span style='color:blue'>${new_span}</span>`);
									text_position = f[1]
								}
								else{
									new_span = m.answer_meaning.substring(text_position,f[0]);
									$(`span[id=${m.unique_selection_ID}]`).append(`<span>${new_span}</span>`);
									new_span =  m.answer_meaning.substring(f[0],f[1]);
									$(`span[id=${m.unique_selection_ID}]`).append(`<span style='color:blue'>${new_span}</span>`);
									text_position = f[1]
								}
							};
							if (text_length != text_position){					
								new_span =  m.answer_meaning.substring(text_position);
								$(`span[id=${m.unique_selection_ID}]`).append(`<span>${new_span}</span>`);
							}
							$(`span[id=${m.unique_selection_ID}]`).append(`<span>,</span>`);

						}
						else{
								$(`span[id=${m.unique_selection_ID}]`).text(`${m.answer_meaning},`)
						}
					};
					$("p[id=matches]").removeClass("hide")
					$("#statement_matches").removeClass("hide")

					if (find_counter !== 0){
						$("span[id=find_counter]").text(`${find_counter}`)
						$("#statement_match_counter").text(`${match_count}`)
					}else{
						$("span[id=find_counter]").text(`No`)
						$("#statement_match_counter").text(`No`)
					}
					
				}
				else{
					for (let m of cur_set){
						$(`span[id='${m.unique_selection_ID}']`).empty();				
						$(`span[id='${m.unique_selection_ID}']`).text(`${m.answer_meaning},`)
					}
					$("p[id=matches]").addClass("hide")
					$("#statement_matches").addClass("hide");
				}
			});
	}
	function fraud_or_comp(f_or_c){		
		if ($(`input[type=checkbox][value=${f_or_c}]`).prop("checked") == true){
			$("span[type=meaning]").each(function(){
				if ($(this).data(`${f_or_c}`) == 1){
					$(this).removeClass("stand_text")
					$(this).addClass(`${f_or_c}`);
					$(this).attr("marked",+1)
				}
			});
		}else if($(`input[type=checkbox][value=${f_or_c}]`).prop("checked") == false){
			$("span[type=meaning]").each(function(){
				if ($(this).data(`${f_or_c}`) == 1){
					$(this).removeClass(`${f_or_c}`)
						.addClass("stand_text")
					 	.attr("marked",-1)
				}
			});
		}
	}
	function get_mp_selecs(){
		$("button[id=loading]").removeClass("hide");
		$("p[id=meaning_string").toggleClass("hide");
		if (sets.selec_set_counter == undefined){
			set  = JSON.parse(selection_sets[selec_set_counter])
		}else{
			sets.selec_set_counter=set
		}
		$.ajax({
			data : {selec_set :set.set_ID},
			type : 'POST',
			url : "/get_mp_selection/revisions",
			success: function(data){
				cur_set = []
				if (data == "no_selections"){
					alert("no_selections")
				}
				set = data.selec_set
				$("button[id=loading]").addClass("hide");
				$("p[id=meaning_string").addClass("hide");
				$("div[id=meaning_body]").empty();
				for (let s of set){
					s = JSON.parse(s)
					if (s.auxilliary_data == "extra"){
						var placeholder = "``````"
						var extra_data_slice = s.answer_meaning.search(new RegExp(placeholder, "i"));

						if (extra_data_slice != -1){
							var slice_end = extra_data_slice + 6
							var start = s.answer_meaning.substring(extra_data_slice, slice_end)
							var end = s.answer_meaning.substring( slice_end)
							s.answer_meaning = "" + start + s.ancilliary_data + end
						}
					}
					$("div[id=meaning_body]").append(`
							<span 
								data-competancy="${s.competancy_imp}" 
								type="meaning" 
								data-fraud="${s.fraud_imp}" 
								data-meaning="${s.answer_meaning}" 
								class="stand_text" 
								id="${s.unique_selection_ID}" 
								data-ans="${s.answer}"
								marked="0" 
								data-parent_set='${s.parent_set}'
								data-parent_unique_selection_ID='${s.parent_unique_selection_ID}'
								data-selection_ans='${s.selection_ans}'
								data-lft='${s.lft}'
								data-rgt='${s.rgt}'
								data-auxilliary_data='${s.auxilliary_data}'>
									${s.answer_meaning},
							</span>`
					)
					cur_set.push(s)
				}
				meaning_manip()
				search_function()
				fraud_or_comp("fraud")
				fraud_or_comp("competancy")				
			},
			error: function(error) {
				console.log(error);
			}
		});
	};

	function selec_data_viewer(){
			if (selec_ans.competancy == 1){
			$("p[id=selec_competancy]").text("This selection suggests the disclosee may have some existential gaps in their knowlage of the property")
		}else{
			$("p[id=selec_competancy]").text("")
		}
		if (selec_ans.fraud_imp == 1){
			$("p[id=selec_fraud]").text("This selection may indicate fraudulent behavior")
		}else{
			$("p[id=selec_fraud]").text("")
		}
		if (selec_ans.fraud_imp == 1){
			$("p[id=selec_fraud]").text("This selection may indicate fraudulent behavior")
		}else{
			$("p[id=selec_fraud]").text("")
		}
	};

	function side_view_selec_meaning(){
			$("#side_viewer").removeClass("hide")
			$(selec_meaning).css( {"background-color":"grey"} );
			selec_ans = $(selec_meaning).data()
			meaning_lft_rgt(function(a){(a).css({"color":"grey"})})
			selec_data_viewer()
	};

	function non_side_selec_meaning(){
		$("#divId").css( {position:"absolute", top:event.pageY, left: event.pageX});
		$("#divId").toggleClass("hide");
		selec_data_viewer()
	};

	function remove_selec_mean_grey(){
		$(selec_meaning).css( { 'background-color':'transparent' } );
		selec_ans = $(selec_meaning).data()
		meaning_lft_rgt(function(a){(a).css( { 'color':'black' } )});

	};

function meaning_manip(){
	$("span[type=meaning]").click(function(e){

		if (selec_meaning != "empty"){
			remove_selec_mean_grey()
		}
		selec_meaning = this
		selec_ans =$(this).data()
		id = selec_ans.id
		getinfo = true;
		infoid = id;
		if (side_view === false){
			non_side_selec_meaning()	
		}else if (side_view === true){
			close_work_task_module()
			side_view_selec_meaning()
		}

	});
	
	$("span[type=meaning]").mouseenter(function(e){
		if((side_view == true && this == selec_meaning) == false){
			selec_ans =$(this).data()
			$(this).css( {"background-color":"white"} );
			meaning_lft_rgt(function(a){(a).addClass("text_hover")})
		}
	});

	$("#divId").mouseenter(function(e){
		if (divmin == false){
			divmin = true;
		};
	});

	function close_divID(){
		if (side_view == false){
			$("#divId").addClass("hide");
		  	$("p[id=selec_competancy]").text("");
		}else if (side_view == true){
			$("#side_viewer").addClass("hide")
		}
		close_work_task_module()
	}
	$("#divId").mouseleave(function(){
		if (getinfo == false){
			if (divmin == true){
	 			divmin = false;
	 		};
	 		if ($("#divId").hasClass("hide")==false){
	 			close_divID()
	  		};
	 	};
	 	if ($("#divId").hasClass("hide")==false){
	  		close_divID()
	  	};
	});

	$("span[type=meaning]").mouseleave(function() {
		setTimeout(function(){
			if (divmin == true){}
			else if ($("#divId").hasClass("hide")==false){
	  			$("#divId").toggleClass("hide");
	  			getinfo = false
			};
		});
		if ((this == selec_meaning && side_view == true)== false){
			$(this).css( { 'background-color':'transparent' } );
			$("span[type=meaning]").removeClass("text_hover")
		}
	});
	$("button[id=change_selec]").click(function(e){
		if (infoid == undefined){alert("bb")}
		else{
		baseUrl = "{{urlr}}"
		page="change_selection/"
		particular_id= "{{particular_id}}/"
		selec_set_ID="{{selec_set_ID}}/"
		url = ""+baseUrl+page+particular_id+selec_set_ID+infoid+"/"+selec_ans
		window.location.href = url
		}
	});

	$("input[type=checkbox][value=fraud]").click(function(){
		fraud_or_comp("fraud")
	});

	$("input[type=checkbox][value=competancy]").click(function(){
		fraud_or_comp("competancy")
	});
	}

	$("button[id=prev_selec_set").click(function(e){
		selec_set_counter += 1;
		if (selec_set_counter > 0){$("button[id=earlier_selec_set").attr('disabled', false)}
		if(selec_set_counter == number_of_selec_sets){
			alert(selec_set_counter)
			$(this).attr('disabled', true)};
		get_mp_selecs()

	});

	$("button[id=earlier_selec_set").click(function(e){
		selec_set_counter -= 1;
		if(selec_set_counter == 0){
			$(this).attr('disabled', true)};
		get_mp_selecs()
	});

	get_mp_selecs()

	$('input[type=radio][name=Topic]').change(function(){
		if (this.value=="topic"){
			 		$('#fil').slideDown();
		}
		else if(this.value!="topic"){
			 		$("#checkbox").attr("checked", false);			 		
			 		$('#fil').slideUp();
		}
	});

	$("#toggle_side_view").click(function(){
		if (side_view === false){
			$("#divId").addClass("hide")
			$("#meaning_and_side").append(`
			<div class="column is-one-third" id="side_holder">
				<div class="hide" id="side_viewer">
					<div class="box">
						<p id="selec_competancy"></p>
						<p id="selec_fraud"></p>
						<div id="statement_alters">
							<button class = "button is-small" id="change_selec"> Change Selection</button>
							<button class = "button is-small" id="alter_selec_text"> Alter Statement</button>
						</div>
							<div id="alter_statement_options">
								<button class = "button is-small" id="add_statement"> add statement</button>
								<button class = "button is-small" id="alter_statement_text">alter statement</button>
							</div>
							<div>
								<button class = "button is-small is-success" id="open_work_task_module">
									Add Work Task
								</button>
								<button class = "button is-small is-success" id="open_note_module">
									Add note
								</button>			
								<div id="work_task_module">
									<div style="display:flex; flex-direction:row;">
										<div style="display:flex; flex-direction:column;">
											<div>Task Description</div>
											<input type="text" id="work_task_header">
										</div>
										<div style="display:flex; flex-direction:column;">
											<button id="add_work_task_schedule">
												Add Schedule Date
											</button>
											<input type="date" class="date" id="work_task_date">
										</div>
									</div>
									<div style="display:flex; flex-direction:column;">
										<div> Task Data</div>
										<textarea id="work_task_info"></textarea>
									</div>
									<div>
										<button class="button is-small is-success" id="create_work_task">
											Create Work Task
										</button>
									</div>			
								</div>
								<div id="stand_note_module" class="hide">
									<div style="display:flex; flex-direction:column;">
										<input type="text">
									</div>
								</div>
							</div>
					</div>
				</div>
			</div>
			`)
			side_and_modules()
			$("#toggle_side_view").text("Hide side view")
			side_view = true;
			side_view_selec_meaning()
		}else if (side_view === true){
			remove_selec_mean_grey()
			$("#side_holder").remove()
			$("#toggle_side_view").text("Open side view")
			side_view = false;
			non_side_selec_meaning()			
		}
	});

});	

</script>

{% endblock %}